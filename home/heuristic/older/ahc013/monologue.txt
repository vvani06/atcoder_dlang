https://atcoder.jp/contests/ahc013/tasks/ahc013_a

===

考えたこと

スコアは全部プラスの場合、二次関数: f(x) = x(x - 1)/2 なので、同じコンピュータ同時を繋げまくる戦略が良さそう
100個全てをつなぐことができれば 99*100/2 = 4500
50個だと 49*50/2 = 1225

移動 + 接続 を実行できる回数は合計で K * 100
同じ種類のクラスタだけで接続を行う場合、 K * 99 回の接続が必要
これを考えると、移動させる余裕はあまりなさそうな気がする。

疎な場合、移動させないと接続ができないケースがありそう。移動が有効そう。
逆に密な場合は移動させるのも大変なので、ペナルティを許容して接続を優先す流のが良いか？

===

やったこと

最初は移動を無視して、同じ種類のコンピュータをつなげるだけの実装をやることにする。
これは最初から最後まで使えるロジックになるはず。イメージは01BFSが近そうだ。

---

実装はなんとかなった。接続したコンピュータの間は通れなくなるので、訪問ずみフラグの管理をしっかりやる必要があった。
雑に接続だけ済ませた状態で提出してみると、28374 点だった。
始まってから2時間しか経っておらず、提出者が少ないせいか 24 位だった。悪くないスタート。

接続の実装は [1, 2, 3, 4, 5] の順に行儀よく行うようにしているのだけど、順番によってスコアが増減することはあり得そうだ。
全パターン試しても大した計算量ではないので、全て試して最高スコアのやつを選ぶようにしてみよう。
手元スコアは微増した。提出してみたところ 30904 点だった。手元同様、大して伸びませんな。

この時点でスコアの考察をしてみたけど、密な場合はそこそこよいスコアが出ている。疎な場合はかなり厳しい。
ただ。密かつ5色、みたいなケースは最悪だ。 seed=7 がそれにあたる。

---

接続だけでは限界がありそうなので、移動を試みてみる。
問題の制約から、1つの行 or 列 に置かれるコンピュータの種類はなるべく揃えられている方が良さそう。
ただ、調子良く移動させまくっていると操作回数の上限にたやすく引っかかりそうな気もする。
とりあえず1歩だけ左右上下に動かして、なるべく種類が揃うような実装を加えてみた。
これで接続は従来の通りやってみていい感じだった。提出すると 66290 点。結構伸びた。

---

接続の順番について、今は種類ごとにまとめて実施している。
これを「一番大きいクラスター」順に構築していくことで効率の悪い接続を少なくできる気がする。
ということで接続を行う順序を色々調整してみた。いい感じだったので提出。 79174 点。悪くない。

---

seed=0 のケースでは異色のコンピュータを1点か2点か許容するとクラスターの大きさをある程度拡げられるようなケースがある。
これをなんとか実装できないだろうか。いくつかの実装方針が思いつける。

たとえば、BFSの最中に「異色のコンピュータに当たったので探索を終了する」と同時に、その点を記録しておく。
その点を同色だと認識させておいて無理やり領域を広げるという感じ。

もう一つは、同色のクラスターが2つ以上ある時にそれをマージする、という感じ。
さっきの方法と同様に異色のコンピュータの点を記録しておいて、それが複数のクラスターから共有されている状態であれば、その点をもとにマージすることができそう。

---

実装的に簡単そうな前者をやってみた。異色のコンピュータを1つだけ混ぜて、5個くらいクラスターが広がるなら、みたいな
かなり厳しめの条件で雑に実装。スコア計算機の実装が雑なのでペナルティ分がわからないのが少し困る。
公式のシミュレータに食わせると正しいスコアが出るのでとりあえずそっちで代用して、いい感じっぽいことがわかったので提出。 91730 点。 10万に届きそうになった。

---


